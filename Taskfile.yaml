# https://taskfile.dev

version: '3'

vars:
  REPO_NAME: go-printers
  REPO_OWNER: davidalpert
  CURRENT_VERSION:
    sh: sbot get version
  VERSION: '{{ .NEXT_VERSION | default .CURRENT_VERSION }}'

tasks:
  default:
    deps:
      - help
    silent: true

  cit:
    desc: CI task; cleans, run tests, and builds
    deps:
      - clean
      - vale
      - test

  clean:
    desc: clean build output
    cmds:
      - rm -rf /bin

  vale:
    desc: run linting rules against markdown files
    run: once
    cmds:
      - vale README.md CONTRIBUTING.md # we don't valedate CHANGELOG.md as that reflects historical commit summaries
    status:
      - '[[ "$GITHUB_ACTIONS" -neq "true" ]]'

  doctor:
    desc: run doctor.sh to sort out development dependencies
    cmds:
      - ./.tools/doctor.sh

  guard:
    desc: run guard to vale in real-time
    cmds:
      - bundle exec guard

  gen:
    desc: run code-generation
    run: once
    cmds:
      - go run ./.tools/version_gen.go {{ .CMD_NAME }}
    env:
      VERSION: "{{ .VERSION }}"
    status:
      # - grep "\"{{ .VERSION }}\"" internal/version/detail.go
      - '[[ -n $SKIP_GEN ]]'

  bundle:
    desc: install ruby gems
    run: once
    cmds:
      - bundle --quiet

  test:
    desc: run tests
    run: once
    cmds:
      - go test -v ./...
    silent: true

  autotest:
    desc: run tests continuously using goconvey's test UI
    deps:
      - gen
    cmds:
      - goconvey
    silent: true

  changelog:
    desc: generate/update CHANGELOG.md
    cmds:
      - git-chglog --output CHANGELOG.md

  preview-release-notes:
    desc: preview release notes (generates RELEASE_NOTES.md)
    cmds:
      - git-chglog --output RELEASE_NOTES.md --template .chglog/RELEASE_NOTES.tpl.md "v{{ .VERSION }}"

  release:
    cmds:
      - task: gen
        vars:
          VERSION: "{{ .NEXT_VERSION }}"
      # - task: features
      - git add -f internal/version/detail.go
      - git-chglog --next-tag v{{ .NEXT_VERSION }} --output CHANGELOG.md
      - git add -f CHANGELOG.md
      - git commit --message "release notes for v{{ .NEXT_VERSION }}"
      - sbot release version --mode {{ .BUMP_TYPE }}
      - git show --no-patch --format=short v{{ .NEXT_VERSION }}
    preconditions:
      - sh: git diff-files --quiet
        msg: There are unstaged changes; clean your working directory before releasing.
      - sh: git diff-index --quiet --cached HEAD --
        msg: There are uncomitted changes; clean your working directory before releasing.
    vars:
      NEXT_VERSION:
        sh: sbot predict version --mode {{ .BUMP_TYPE }}
    
  release-patch:
    desc: release a patch update
    cmds:
      - task: release
        vars:
          BUMP_TYPE: patch

  release-minor:
    desc: release a minor update
    cmds:
      - task: release
        vars:
          BUMP_TYPE: minor

  release-major:
    desc: release a major update
    cmds:
      - task: release
        vars:
          BUMP_TYPE: major

  help:
    desc: list targets
    cmds:
      - echo "{{ .CMD_NAME}} v{{ .VERSION }}"
      - echo ""
      - task --list
    silent: true

